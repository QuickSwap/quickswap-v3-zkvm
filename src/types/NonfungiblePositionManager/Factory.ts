// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FarmingAddress extends ethereum.Event {
  get params(): FarmingAddress__Params {
    return new FarmingAddress__Params(this);
  }
}

export class FarmingAddress__Params {
  _event: FarmingAddress;

  constructor(event: FarmingAddress) {
    this._event = event;
  }

  get newFarmingAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeConfiguration extends ethereum.Event {
  get params(): FeeConfiguration__Params {
    return new FeeConfiguration__Params(this);
  }
}

export class FeeConfiguration__Params {
  _event: FeeConfiguration;

  constructor(event: FeeConfiguration) {
    this._event = event;
  }

  get alpha1(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get alpha2(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get beta1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beta2(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gamma1(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get gamma2(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get volumeBeta(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get volumeGamma(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get baseFee(): i32 {
    return this._event.parameters[8].value.toI32();
  }
}

export class Owner extends ethereum.Event {
  get params(): Owner__Params {
    return new Owner__Params(this);
  }
}

export class Owner__Params {
  _event: Owner;

  constructor(event: Owner) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Pool extends ethereum.Event {
  get params(): Pool__Params {
    return new Pool__Params(this);
  }
}

export class Pool__Params {
  _event: Pool;

  constructor(event: Pool) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class VaultAddress extends ethereum.Event {
  get params(): VaultAddress__Params {
    return new VaultAddress__Params(this);
  }
}

export class VaultAddress__Params {
  _event: VaultAddress;

  constructor(event: VaultAddress) {
    this._event = event;
  }

  get newVaultAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Factory__baseFeeConfigurationResult {
  value0: i32;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: i32;
  value6: BigInt;
  value7: i32;
  value8: i32;

  constructor(
    value0: i32,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: i32,
    value6: BigInt,
    value7: i32,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }

  getAlpha1(): i32 {
    return this.value0;
  }

  getAlpha2(): i32 {
    return this.value1;
  }

  getBeta1(): BigInt {
    return this.value2;
  }

  getBeta2(): BigInt {
    return this.value3;
  }

  getGamma1(): i32 {
    return this.value4;
  }

  getGamma2(): i32 {
    return this.value5;
  }

  getVolumeBeta(): BigInt {
    return this.value6;
  }

  getVolumeGamma(): i32 {
    return this.value7;
  }

  getBaseFee(): i32 {
    return this.value8;
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  baseFeeConfiguration(): Factory__baseFeeConfigurationResult {
    let result = super.call(
      "baseFeeConfiguration",
      "baseFeeConfiguration():(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)",
      []
    );

    return new Factory__baseFeeConfigurationResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toI32(),
      result[8].toI32()
    );
  }

  try_baseFeeConfiguration(): ethereum.CallResult<
    Factory__baseFeeConfigurationResult
  > {
    let result = super.tryCall(
      "baseFeeConfiguration",
      "baseFeeConfiguration():(uint16,uint16,uint32,uint32,uint16,uint16,uint32,uint16,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__baseFeeConfigurationResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toI32(),
        value[8].toI32()
      )
    );
  }

  createPool(tokenA: Address, tokenB: Address): Address {
    let result = super.call(
      "createPool",
      "createPool(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );

    return result[0].toAddress();
  }

  try_createPool(
    tokenA: Address,
    tokenB: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPool",
      "createPool(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  farmingAddress(): Address {
    let result = super.call("farmingAddress", "farmingAddress():(address)", []);

    return result[0].toAddress();
  }

  try_farmingAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "farmingAddress",
      "farmingAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolByPair(param0: Address, param1: Address): Address {
    let result = super.call(
      "poolByPair",
      "poolByPair(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toAddress();
  }

  try_poolByPair(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolByPair",
      "poolByPair(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolDeployer(): Address {
    let result = super.call("poolDeployer", "poolDeployer():(address)", []);

    return result[0].toAddress();
  }

  try_poolDeployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolDeployer", "poolDeployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultAddress(): Address {
    let result = super.call("vaultAddress", "vaultAddress():(address)", []);

    return result[0].toAddress();
  }

  try_vaultAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultAddress", "vaultAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _poolDeployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vaultAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetBaseFeeConfigurationCall extends ethereum.Call {
  get inputs(): SetBaseFeeConfigurationCall__Inputs {
    return new SetBaseFeeConfigurationCall__Inputs(this);
  }

  get outputs(): SetBaseFeeConfigurationCall__Outputs {
    return new SetBaseFeeConfigurationCall__Outputs(this);
  }
}

export class SetBaseFeeConfigurationCall__Inputs {
  _call: SetBaseFeeConfigurationCall;

  constructor(call: SetBaseFeeConfigurationCall) {
    this._call = call;
  }

  get alpha1(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get alpha2(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get beta1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get beta2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get gamma1(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get gamma2(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get volumeBeta(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get volumeGamma(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get baseFee(): i32 {
    return this._call.inputValues[8].value.toI32();
  }
}

export class SetBaseFeeConfigurationCall__Outputs {
  _call: SetBaseFeeConfigurationCall;

  constructor(call: SetBaseFeeConfigurationCall) {
    this._call = call;
  }
}

export class SetFarmingAddressCall extends ethereum.Call {
  get inputs(): SetFarmingAddressCall__Inputs {
    return new SetFarmingAddressCall__Inputs(this);
  }

  get outputs(): SetFarmingAddressCall__Outputs {
    return new SetFarmingAddressCall__Outputs(this);
  }
}

export class SetFarmingAddressCall__Inputs {
  _call: SetFarmingAddressCall;

  constructor(call: SetFarmingAddressCall) {
    this._call = call;
  }

  get _farmingAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFarmingAddressCall__Outputs {
  _call: SetFarmingAddressCall;

  constructor(call: SetFarmingAddressCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetVaultAddressCall extends ethereum.Call {
  get inputs(): SetVaultAddressCall__Inputs {
    return new SetVaultAddressCall__Inputs(this);
  }

  get outputs(): SetVaultAddressCall__Outputs {
    return new SetVaultAddressCall__Outputs(this);
  }
}

export class SetVaultAddressCall__Inputs {
  _call: SetVaultAddressCall;

  constructor(call: SetVaultAddressCall) {
    this._call = call;
  }

  get _vaultAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultAddressCall__Outputs {
  _call: SetVaultAddressCall;

  constructor(call: SetVaultAddressCall) {
    this._call = call;
  }
}
